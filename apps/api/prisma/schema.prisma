// This is your Prisma schema file for SQLite development
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String    @map("password_hash")
  username          String    @unique
  bio               String?
  avatarUrl         String?   @map("avatar_url")
  interests         String?   // JSON as string for SQLite
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  emailVerified     Boolean   @default(false) @map("email_verified")
  privacySettings   String?   @map("privacy_settings") // JSON as string
  lastActive        DateTime? @map("last_active")
  role              String    @default("USER") // Enum as string
  
  // Relationships
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
  sentMessages      Message[] @relation("MessageSender")
  channelMemberships ChatChannelMember[]
  reports           Report[]  @relation("Reporter")
  handledReports    Report[]  @relation("Handler")
  moderationActions ModerationAction[]
  stressScores      StressScore[]
  moodEntries       MoodEntry[]
  
  @@map("users")
}

model Post {
  id            String    @id @default(uuid())
  authorId      String    @map("author_id")
  content       String
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  tags          String?   // JSON as string for SQLite
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isHidden      Boolean   @default(false) @map("is_hidden")
  hiddenByModId String?   @map("hidden_by_mod_id")
  hideReason    String?   @map("hide_reason")
  
  // Relationships
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  reactions     Reaction[]
  
  @@map("posts")
}

model Comment {
  id          String    @id @default(uuid())
  postId      String    @map("post_id")
  authorId    String    @map("author_id")
  parentId    String?   @map("parent_id")
  content     String
  isAnonymous Boolean   @default(false) @map("is_anonymous")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isHidden    Boolean   @default(false) @map("is_hidden")
  
  // Relationships
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]  @relation("CommentReplies")
  reactions   Reaction[]
  
  @@map("comments")
}

model Reaction {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  targetId     String      @map("target_id")
  targetType   String      @map("target_type") // Enum as string
  reactionType String      @map("reaction_type") // Enum as string
  createdAt    DateTime    @default(now()) @map("created_at")
  
  // Relationships
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post?       @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment      Comment?    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetId, targetType])
  @@map("reactions")
}

model ChatChannel {
  id        String    @id @default(uuid())
  name      String?
  type      String    // Enum as string
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  
  // Relationships
  members   ChatChannelMember[]
  messages  Message[]
  
  @@map("chat_channels")
}

model ChatChannelMember {
  id        String   @id @default(uuid())
  channelId String   @map("channel_id")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")
  role      String   @default("MEMBER") // Enum as string
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([channelId, userId])
  @@map("chat_channel_members")
}

model Message {
  id        String   @id @default(uuid())
  channelId String   @map("channel_id")
  senderId  String   @map("sender_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender    User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

model Report {
  id          String      @id @default(uuid())
  reporterId  String      @map("reporter_id")
  targetId    String      @map("target_id")
  targetType  String      @map("target_type") // Enum as string
  reason      String      // Enum as string
  description String?
  status      String      @default("PENDING") // Enum as string
  handledById String?     @map("handled_by_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  resolvedAt  DateTime?   @map("resolved_at")
  
  // Relationships
  reporter    User        @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  handler     User?       @relation("Handler", fields: [handledById], references: [id])
  
  @@map("reports")
}

model ModerationAction {
  id          String          @id @default(uuid())
  moderatorId String          @map("moderator_id")
  targetId    String          @map("target_id")
  targetType  String          @map("target_type") // Enum as string
  actionType  String          @map("action_type") // Enum as string
  reason      String
  expiresAt   DateTime?       @map("expires_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  
  // Relationships
  moderator   User            @relation(fields: [moderatorId], references: [id])
  
  @@map("moderation_actions")
}

model StressScore {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  score     Float
  features  String   // JSON as string for SQLite
  createdAt DateTime @default(now()) @map("created_at")
  scoreDate DateTime @map("score_date") // No @db.Date for SQLite
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, scoreDate])
  @@map("stress_scores")
}

model MoodEntry {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  moodScore Int      @map("mood_score")
  tags      String?  // JSON as string for SQLite
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mood_entries")
}

model Resource {
  id          String       @id @default(uuid())
  title       String
  description String?
  url         String
  category    String       // Enum as string
  locale      String       @default("en")
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  
  @@map("resources")
}