// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

type PrivacySettings {
  allowDirectMessages Boolean @default(true)
  showOnlineStatus    Boolean @default(true)
  allowProfileViewing Boolean @default(true)
  dataCollection      Boolean @default(true)
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  email             String           @unique
  passwordHash      String           @map("password_hash")
  username          String           @unique
  bio               String?
  avatarUrl         String?          @map("avatar_url")
  interests         String[]         // Array of strings for MongoDB
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  emailVerified     Boolean          @default(false) @map("email_verified")
  privacySettings   PrivacySettings? @map("privacy_settings")
  lastActive        DateTime?        @map("last_active")
  role              UserRole         @default(USER)
  
  // Relationships
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
  sentMessages      Message[] @relation("MessageSender")
  channelMemberships ChatChannelMember[]
  reports           Report[]  @relation("Reporter")
  handledReports    Report[]  @relation("Handler")
  moderationActions ModerationAction[]
  stressScores      StressScore[]
  moodEntries       MoodEntry[]
  
  @@map("users")
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String    @map("author_id") @db.ObjectId
  content       String
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  tags          String[]  // Array of strings for MongoDB
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isHidden      Boolean   @default(false) @map("is_hidden")
  hiddenByModId String?   @map("hidden_by_mod_id") @db.ObjectId
  hideReason    String?   @map("hide_reason")
  
  // Relationships
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  reactions     Reaction[]
  
  @@map("posts")
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  postId      String    @map("post_id") @db.ObjectId
  authorId    String    @map("author_id") @db.ObjectId
  parentId    String?   @map("parent_id") @db.ObjectId
  content     String
  isAnonymous Boolean   @default(false) @map("is_anonymous")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isHidden    Boolean   @default(false) @map("is_hidden")
  
  // Relationships
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]  @relation("CommentReplies")
  reactions   Reaction[]
  
  @@map("comments")
}

enum TargetType {
  POST
  COMMENT
  USER
  MESSAGE
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

model Reaction {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @map("user_id") @db.ObjectId
  targetId     String       @map("target_id") @db.ObjectId
  targetType   TargetType   @map("target_type")
  reactionType ReactionType @map("reaction_type")
  createdAt    DateTime     @default(now()) @map("created_at")
  
  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post?        @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment      Comment?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetId, targetType])
  @@map("reactions")
}

enum ChannelType {
  DIRECT_MESSAGE
  GROUP_CHAT
  STUDY_GROUP
  SUPPORT_CIRCLE
}

enum MemberRole {
  MEMBER
  ADMIN
  MODERATOR
}

model ChatChannel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      ChannelType
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  // Relationships
  members   ChatChannelMember[]
  messages  Message[]
  
  @@map("chat_channels")
}

model ChatChannelMember {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  channelId String     @map("channel_id") @db.ObjectId
  userId    String     @map("user_id") @db.ObjectId
  joinedAt  DateTime   @default(now()) @map("joined_at")
  role      MemberRole @default(MEMBER)
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([channelId, userId])
  @@map("chat_channel_members")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId String   @map("channel_id") @db.ObjectId
  senderId  String   @map("sender_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender    User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  SELF_HARM
  VIOLENCE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

enum ActionType {
  HIDE_CONTENT
  DELETE_CONTENT
  WARN_USER
  SUSPEND_USER
  BAN_USER
}

model Report {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  reporterId  String       @map("reporter_id") @db.ObjectId
  targetId    String       @map("target_id") @db.ObjectId
  targetType  TargetType   @map("target_type")
  reason      ReportReason
  description String?
  status      ReportStatus @default(PENDING)
  handledById String?      @map("handled_by_id") @db.ObjectId
  createdAt   DateTime     @default(now()) @map("created_at")
  resolvedAt  DateTime?    @map("resolved_at")
  
  // Relationships
  reporter    User         @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  handler     User?        @relation("Handler", fields: [handledById], references: [id])
  
  @@map("reports")
}

model ModerationAction {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  moderatorId String     @map("moderator_id") @db.ObjectId
  targetId    String     @map("target_id") @db.ObjectId
  targetType  TargetType @map("target_type")
  actionType  ActionType @map("action_type")
  reason      String
  expiresAt   DateTime?  @map("expires_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  
  // Relationships
  moderator   User       @relation(fields: [moderatorId], references: [id])
  
  @@map("moderation_actions")
}

type StressFeatures {
  textSentiment     Float?
  postFrequency     Float?
  sleepPattern      Float?
  socialInteraction Float?
  academicStress    Float?
}

enum ResourceCategory {
  MENTAL_HEALTH
  ACADEMIC_SUPPORT
  CAREER_GUIDANCE
  FINANCIAL_AID
  CRISIS_SUPPORT
}

model StressScore {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @map("user_id") @db.ObjectId
  score     Float
  features  StressFeatures
  createdAt DateTime       @default(now()) @map("created_at")
  scoreDate DateTime       @map("score_date") @db.Date
  
  // Relationships
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, scoreDate])
  @@map("stress_scores")
}

model MoodEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  moodScore Int      @map("mood_score")
  tags      String[] // Array of strings for MongoDB
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mood_entries")
}

model Resource {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  url         String
  category    ResourceCategory
  locale      String           @default("en")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  
  @@map("resources")
}