// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

type PrivacySettings {
  allowDirectMessages Boolean @default(true)
  showOnlineStatus    Boolean @default(true)
  allowProfileViewing Boolean @default(true)
  dataCollection      Boolean @default(true)
}

type WellnessSettings {
  trackMood             Boolean @default(true)
  trackStress           Boolean @default(true)
  shareWellnessData     Boolean @default(false)
  crisisAlertsEnabled   Boolean @default(true)
  allowWellnessInsights Boolean @default(true)
}

type NotificationPreferences {
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  messageNotifications  Boolean @default(true)
  postReactions         Boolean @default(true)
  commentReplies        Boolean @default(true)
  studyGroupInvites     Boolean @default(true)
  sessionReminders      Boolean @default(true)
  wellnessAlerts        Boolean @default(true)
  moderationActions     Boolean @default(true)
  systemAnnouncements   Boolean @default(true)
}

type UserPreferences {
  feedAlgorithm         String  @default("personalized") // "chronological" | "personalized"
  privacyLevel          String  @default("public") // "public" | "friends" | "private"
  theme                 String  @default("light") // "light" | "dark" | "auto"
  language              String  @default("en")
  timezone              String  @default("UTC")
  notifications         NotificationPreferences
}

type AcademicInfo {
  institution String?
  major       String?
  year        Int?
  courses     String[]
  gpa         Float?
  graduationYear Int?
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  email             String           @unique
  passwordHash      String           @map("password_hash")
  username          String           @unique
  bio               String?
  avatarUrl         String?          @map("avatar_url")
  interests         String[]         // Array of strings for MongoDB
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  emailVerified     Boolean          @default(false) @map("email_verified")
  privacySettings   PrivacySettings? @map("privacy_settings")
  wellnessSettings  WellnessSettings? @map("wellness_settings")
  preferences       UserPreferences? @map("user_preferences")
  academicInfo      AcademicInfo?    @map("academic_info")
  lastActive        DateTime?        @map("last_active")
  role              UserRole         @default(USER)
  
  // Relationships
  posts             Post[]
  comments          Comment[]
  reactions         Reaction[]
  sentMessages      Message[] @relation("MessageSender")
  channelMemberships ChatChannelMember[]
  reports           Report[]  @relation("Reporter")
  handledReports    Report[]  @relation("Handler")
  moderationActions ModerationAction[]
  stressScores      StressScore[]
  moodEntries       MoodEntry[]
  otps              Otp[]
  
  // New relationships for platform enhancements
  wellnessMetrics   WellnessMetric[]
  createdStudyGroups StudyGroup[] @relation("StudyGroupCreator")
  studyGroupMemberships StudyGroupMember[]
  sessionAttendances SessionAttendee[]
  notifications     Notification[]
  reviewedFlags     ContentFlag[]
  studyResources    StudyResource[]
  
  @@map("users")
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String    @map("author_id") @db.ObjectId
  content       String
  isAnonymous   Boolean   @default(false) @map("is_anonymous")
  tags          String[]  // Array of strings for MongoDB
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  isHidden      Boolean   @default(false) @map("is_hidden")
  hiddenByModId String?   @map("hidden_by_mod_id") @db.ObjectId
  hideReason    String?   @map("hide_reason")
  
  // Relationships
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  reactions     Reaction[]
  
  @@map("posts")
}

model Comment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  postId      String    @map("post_id") @db.ObjectId
  authorId    String    @map("author_id") @db.ObjectId
  parentId    String?   @map("parent_id") @db.ObjectId
  content     String
  isAnonymous Boolean   @default(false) @map("is_anonymous")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isHidden    Boolean   @default(false) @map("is_hidden")
  
  // Relationships
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]  @relation("CommentReplies")
  reactions   Reaction[]
  
  @@map("comments")
}

enum TargetType {
  POST
  COMMENT
  USER
  MESSAGE
}

enum ReactionType {
  LIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

model Reaction {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @map("user_id") @db.ObjectId
  targetId     String       @map("target_id") @db.ObjectId
  targetType   TargetType   @map("target_type")
  reactionType ReactionType @map("reaction_type")
  createdAt    DateTime     @default(now()) @map("created_at")
  
  // Relationships
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  post         Post?        @relation(fields: [targetId], references: [id], onDelete: Cascade)
  comment      Comment?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  
  @@unique([userId, targetId, targetType])
  @@map("reactions")
}

enum ChannelType {
  DIRECT_MESSAGE
  GROUP_CHAT
  STUDY_GROUP
  SUPPORT_CIRCLE
}

enum MemberRole {
  MEMBER
  ADMIN
  MODERATOR
}

model ChatChannel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  type      ChannelType
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  
  // Relationships
  members   ChatChannelMember[]
  messages  Message[]
  
  @@map("chat_channels")
}

model ChatChannelMember {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  channelId String     @map("channel_id") @db.ObjectId
  userId    String     @map("user_id") @db.ObjectId
  joinedAt  DateTime   @default(now()) @map("joined_at")
  role      MemberRole @default(MEMBER)
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([channelId, userId])
  @@map("chat_channel_members")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  channelId String   @map("channel_id") @db.ObjectId
  senderId  String   @map("sender_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")
  
  // Relationships
  channel   ChatChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender    User        @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

enum ReportReason {
  SPAM
  HARASSMENT
  HATE_SPEECH
  INAPPROPRIATE_CONTENT
  SELF_HARM
  VIOLENCE
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

enum ActionType {
  HIDE_CONTENT
  DELETE_CONTENT
  WARN_USER
  SUSPEND_USER
  BAN_USER
}

model Report {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  reporterId  String       @map("reporter_id") @db.ObjectId
  targetId    String       @map("target_id") @db.ObjectId
  targetType  TargetType   @map("target_type")
  reason      ReportReason
  description String?
  status      ReportStatus @default(PENDING)
  handledById String?      @map("handled_by_id") @db.ObjectId
  createdAt   DateTime     @default(now()) @map("created_at")
  resolvedAt  DateTime?    @map("resolved_at")
  
  // Relationships
  reporter    User         @relation("Reporter", fields: [reporterId], references: [id], onDelete: Cascade)
  handler     User?        @relation("Handler", fields: [handledById], references: [id])
  
  @@map("reports")
}

model ModerationAction {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  moderatorId String     @map("moderator_id") @db.ObjectId
  targetId    String     @map("target_id") @db.ObjectId
  targetType  TargetType @map("target_type")
  actionType  ActionType @map("action_type")
  reason      String
  expiresAt   DateTime?  @map("expires_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  
  // Relationships
  moderator   User       @relation(fields: [moderatorId], references: [id])
  
  @@map("moderation_actions")
}

type StressFeatures {
  textSentiment     Float?
  postFrequency     Float?
  sleepPattern      Float?
  socialInteraction Float?
  academicStress    Float?
}

enum ResourceCategory {
  MENTAL_HEALTH
  ACADEMIC_SUPPORT
  CAREER_GUIDANCE
  FINANCIAL_AID
  CRISIS_SUPPORT
}

model StressScore {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @map("user_id") @db.ObjectId
  score     Float
  features  StressFeatures
  createdAt DateTime       @default(now()) @map("created_at")
  scoreDate DateTime       @map("score_date") @db.Date
  
  // Relationships
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, scoreDate])
  @@map("stress_scores")
}

model MoodEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  moodScore Int      @map("mood_score")
  tags      String[] // Array of strings for MongoDB
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mood_entries")
}

model Resource {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  url         String
  category    ResourceCategory
  locale      String           @default("en")
  isActive    Boolean          @default(true) @map("is_active")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  
  @@map("resources")
}

// New enums for platform enhancements
enum WellnessType {
  MOOD_SCORE
  STRESS_LEVEL
  SLEEP_QUALITY
  ENERGY_LEVEL
  ANXIETY_LEVEL
  SOCIAL_CONNECTION
}

enum GroupRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum AttendeeStatus {
  PENDING
  CONFIRMED
  DECLINED
  ATTENDED
}

enum NotificationType {
  MESSAGE
  POST_REACTION
  COMMENT_REPLY
  STUDY_GROUP_INVITE
  SESSION_REMINDER
  WELLNESS_ALERT
  MODERATION_ACTION
  SYSTEM_ANNOUNCEMENT
}

enum FlagType {
  TOXICITY
  SPAM
  SELF_HARM
  HARASSMENT
  INAPPROPRIATE
  CRISIS_LANGUAGE
}

enum FlagStatus {
  PENDING
  APPROVED
  REJECTED
  ESCALATED
}

// New models for platform enhancements

model WellnessMetric {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId    String       @map("user_id") @db.ObjectId
  type      WellnessType @map("wellness_type")
  value     Float
  metadata  Json?        // Flexible storage for type-specific data
  createdAt DateTime     @default(now()) @map("created_at")
  
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("wellness_metrics")
}

model StudyGroup {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  courseCode  String?  @map("course_code")
  maxMembers  Int      @default(10) @map("max_members")
  isPublic    Boolean  @default(true) @map("is_public")
  createdById String   @map("created_by_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  
  createdBy   User     @relation("StudyGroupCreator", fields: [createdById], references: [id])
  members     StudyGroupMember[]
  sessions    StudySession[]
  resources   StudyResource[]
  
  @@map("study_groups")
}

model StudyGroupMember {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String     @map("group_id") @db.ObjectId
  userId      String     @map("user_id") @db.ObjectId
  role        GroupRole  @default(MEMBER)
  joinedAt    DateTime   @default(now()) @map("joined_at")
  
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([groupId, userId])
  @@map("study_group_members")
}

model StudySession {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String     @map("group_id") @db.ObjectId
  title       String
  description String?
  scheduledAt DateTime   @map("scheduled_at")
  duration    Int        // Duration in minutes
  location    String?    // Physical or virtual location
  createdAt   DateTime   @default(now()) @map("created_at")
  
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attendees   SessionAttendee[]
  
  @@map("study_sessions")
}

model SessionAttendee {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  sessionId String         @map("session_id") @db.ObjectId
  userId    String         @map("user_id") @db.ObjectId
  status    AttendeeStatus @default(PENDING)
  
  session   StudySession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, userId])
  @@map("session_attendees")
}

model StudyResource {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String     @map("group_id") @db.ObjectId
  uploadedById String    @map("uploaded_by_id") @db.ObjectId
  title       String
  description String?
  fileUrl     String?    @map("file_url")
  fileName    String?    @map("file_name")
  fileSize    Int?       @map("file_size")
  mimeType    String?    @map("mime_type")
  tags        String[]
  createdAt   DateTime   @default(now()) @map("created_at")
  
  group       StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  uploadedBy  User       @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  
  @@map("study_resources")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @map("user_id") @db.ObjectId
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional notification data
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")
  
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model ContentFlag {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  contentId   String     @map("content_id") @db.ObjectId
  contentType TargetType @map("content_type")
  flagType    FlagType   @map("flag_type")
  confidence  Float      // ML confidence score
  reviewedBy  String?    @map("reviewed_by") @db.ObjectId
  status      FlagStatus @default(PENDING)
  createdAt   DateTime   @default(now()) @map("created_at")
  reviewedAt  DateTime?  @map("reviewed_at")
  
  reviewer    User?      @relation(fields: [reviewedBy], references: [id])
  
  @@map("content_flags")
}

enum OtpType {
  EMAIL_VERIFICATION
  LOGIN
  PASSWORD_RESET
  PASSWORD_LOGIN
  REGISTRATION
}

enum OtpStatus {
  PENDING
  VERIFIED
  EXPIRED
  FAILED
}

model Otp {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?   @map("user_id") @db.ObjectId
  email       String
  otp         String
  hashedOtp   String    @map("hashed_otp") // Store hashed version for security
  type        OtpType
  status      OtpStatus @default(PENDING)
  attempts    Int       @default(0)
  maxAttempts Int       @default(3) @map("max_attempts")
  expiresAt   DateTime  @map("expires_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  verifiedAt  DateTime? @map("verified_at")
  ipAddress   String?   @map("ip_address")
  userAgent   String?   @map("user_agent")
  
  // Relationships
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([email, type, status])
  @@index([email, type])
  @@index([expiresAt])
  @@map("otps")
}